import { Simulation, SimulationFinalState } from "./simulation";
import { State } from "./state";

const language = /^[01]*1[01][01]$/;

const testInputs = {
  passing: [
    "10001000110010101100",
    "0011100111111001110100000001110101000100110101011011111110101100",
    "1001110100011001111010100001011101100001110100000100",
    "1111000000100011010010011010010001111100001010010011010011111111001110111101011100",
    "100000100011100",
    "0011001010011010010000110011110101101011011000111110100001010010111",
    "000110110001000111010110111000110111011001110001000101010101101001110",
    "110000110001111010010100100000000011000011100011000101000011011001101",
    "110111100001111001111110111100101011110001000001010010111111010011101011101011110",
    "11001011110",
    "100011011111111001110101110100000111000101110",
    "1110000000001000100100010001000000001010011101000010111111010001110011110100110",
    "001001011111000100011001010111100101",
    "11010101001101000011110010101100111001101011001110110010110111100",
    "0000101100001001110100100011100111011110111001001010110011001100010101110100001001111111",
    "01110111000011011111101100001010011111",
    "000111001101111100000100110111000011000100110110101100110110101111110110111110000110011110111",
    "01111011001001000001001101100110000000111101010101",
    "1011000101011111000101010010000101100011110110000101010011100100010110001011000001110",
    "10011111011101110011111001001110011001110111101110110100111100111011100101111111101110001111",
    "0010001101001010010011000001101101",
    "01001101100010101010101110001100111010001001010000100",
    "0001010100111010000000011100000001011110010100001100011100001100111100",
    "0001001001011101011001100101010010000101110011000101000000110",
    "01000001011011101001101110011101001010101101",
    "1111110001111001000010011000110001100110010100011101000111010110000110000001110110111110101",
    "110",
    "0000100010101010000101000000100",
    "100010110111111111111000000101100101001010111111",
    "011011110111110100101101",
    "111000010000111",
    "011001010100110100010011101000010011100",
    "010110010110111111100001000101110010111011000101",
    "00001011100000001111000010110",
    "111111111110000100110001100010000101011111101100",
    "1010100100010110111110",
    "0101111",
    "00000110110100100",
    "001000000001100000110011000000011100",
    "11001110000001011010001101",
    "0011101111101010110000000010000100011010100",
    "1101110010000100110110101100110111110100",
    "000111111010001001110110101001111011001000000001111",
    "10000010100010010101011001110",
    "101111001010011111010110101",
    "10001101",
    "101001111110011111000110110001110100100001110001011100111100100100000111110000101010110111",
    "0101000110101001111011111010011000110011001101011001100",
    "0111000001111",
    "001001100001110010111011010110110001111",
    "01100010101",
    "11000111001110001011001101011100111",
    "0010011000101000101110100001001110011110100000110",
    "0011100010000101010001100010001110101101101111",
    "01001110100011010110011100100111111111110110",
    "10111111000111101000110001110101001110101101111",
    "101111110001110000111101000000001010010000010101000110110",
    "10111110001110111010101111111010101010000111010101",
    "11111111001000010001100110111001110100100001100111110110",
    "1111011110101100000100110010110011100110101100",
    "01110000000000111110010101101000100001100101001000110001101101",
    "1110110100",
    "101001101100010110110",
    "00101011110011011101011011110011101001101011000111",
    "11110",
    "10001001000100",
    "111111000111111101111000000011000001110111010100101011111010101110000000010000010010111110",
    "00101110",
    "00011011010001011111101101100100010100101001001111000001000100101000100100",
    "01110110110011110001100100010001111110",
    "1101001110000010100",
    "011100101000011111010111100010111100",
    "1010011000001110010100010110111001011010110000100000111111001000001010110001101000111101100",
    "00101110001110110000100001011010000101100010101001001110100101111101011000111111010111",
    "01011010111110000111100",
    "11001011101110010100011101",
    "011101101100110010110001000000011111011101",
    "0010010110001110001100111111000101111000111",
    "0110101110110001111111010011010111110100101001111000001100000001111",
    "101100011010011100110000000000110100011111",
    "10111011101010010101000011110010111001011011000100100110011110000110111001101",
    "011000000001000011100101101110010100110",
    "0100101010110000101010001111110111101010011110001111001001011111011000000101110101101100001010001011110",
    "110110111011000100011001111",
    "101011000110111011100000011010110101",
    "0000101110000010001100010000000111111101100110100110101",
    "10010001110001011100000000110000011101110101111010011111001011100101001011001111001111",
    "011100110000100100000000110001100100110011100011111000011011011110010000101010111101110011101111",
    "10110",
    "10110000111111",
    "100011110110010110111100111011010111111011101100001101111100110011110011011000110",
    "101011000110000010001000101001000100111110111110111100",
    "10011111100101001000001101001101101011011111001110011110010110101",
    "11111110010001101001000101100001110",
    "111111001010000110101011111100010101101110101110001110011000111",
    "11110110011100000010110111",
    "100000111100001100110100",
    "1100111100110100000110010011100010111101110100111110011110100111101000110000010110001111000100",
    "0100101110010001000101001010100110000101100101101100010110",
    "0000001100001111011101100110",
  ],
  failing: ["", "11", "1", "010", "01010101012100", "101010001"],
};

console.assert(
  testInputs.passing.every((input) => language.test(input)),
  "All passing inputs should match the language",
);
console.assert(
  testInputs.failing.every((input) => !language.test(input)),
  "All failing inputs should not match the language",
);

const run = (state: State, input: string[]): SimulationFinalState => {
  const maxSteps = 10000;
  const simulation = new Simulation(state, input);

  for (let i = 0; i < maxSteps; i++) {
    const status = simulation.getCurrentSimulationState();
    switch (status) {
      case "running":
        simulation.simulateStep();
        break;
      case "accept":
        return "accept";
      case "reject":
        return "reject";
    }
  }

  return "reject";
};

export const check = (
  state: State,
): { shouldFail: string } | { shouldPass: string } | undefined => {
  for (const input of testInputs.passing) {
    const result = run(state, input.split(""));
    if (result === "reject") {
      return { shouldPass: input };
    }
  }

  for (const input of testInputs.failing) {
    const result = run(state, input.split(""));
    if (result === "accept") {
      return { shouldFail: input };
    }
  }

  return undefined;
};
